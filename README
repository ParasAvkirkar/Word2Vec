Runtime Environment: Python 3.6, Tensorflow 1.9
========================================================================================================
                    Implementation Details

    model_params.py

    Class: ModelParams
    A class to store parameters to tune model:
    Batch-Size, Size of skip-window, number of samples from window, number of negative samples, number of training steps, learning rate

    This class is use to generate samples, train model in word2vec_basic.py
    And this same class is later used in word_analogy to generate pair-predictions


    word2vec_basic.py

    Method: generate_batch(data, batch_size, num_skips, skip_window)
    Use data_index to keep track of which batches are returned at every step
    A flag should_terminate is maintained,
        which is set to true inside loop when generated batches are enough as per method request

    Method: get_model_name(batch_size, skip_window, num_skips, num_sampled, max_num_steps, learning_rate, loss_model)
    Returns the name of file for a given model in the format
    word2vec_{batch_size}_{skip_window}_{num_skips}_{num_sampled}_{max_num_steps}_{learning_rate}_{loss_model}



    word_analogy.py

    Class: WordAnalogy
        Method: read_test_cases(file_name)
            to read test-cases from given file (web_analogy_dev.txt)
                Returns a list of dictionaries
                each dictionary is: {truth: [ (first_part_of_pair, second_part_of_pair), (,), (,)], test_case: [ (first_part_of_pair, second_part_of_pair), (,), (,), ]}
                Truth is given related pairs having word analogy
                Test_case is related pairs from whom most and least illustrative pairs to written

        Method; get_diff_vector():
            Returns a difference vector

        Method: get_avg_diff_vector
            Returns an average difference vector, for given list of related-pairs

        Method: get_avg_cossim
            Returns an average of cosine similarity calculated between a related pair among list of related pairs
            E.g: (student, essay), (programmer, program) -> ( cosine(student, essay) + cosine(programmer, program) ) / 2

        Method: get_avg_diff_length
            Returns an average of length of difference vector among list of related pairs
            E.g: (student, essay), (programmer, program) -> ( magnitude(student - essay) + magnitude(programmer - program) ) / 2

        Method: execute()
            Processes in each given ground truth related pairs and query related pairs

        Method: get_most_least_illustration()
            Generates most illustrative and least illustrative pairs based on some score

        Method: get_score()
            Generates score on the basis of type of model
            Terms:
            pairwise_cossim -> cosine similarity in a given pair, (student, essay) -> cosine(student, essay)
            (a) absolute_length_diff ->  For a given average of difference vectors and a particular average vector, calculates their absolute length difference
            (b) diff_length_difference -> For a given average length for a set of difference vectors, calculate their difference with a query difference vector
            (a) and (b) may seem similar at first glance, but are different
            avg_cossim -> average of cosine similarity on a list of true related pairs

===================================================================================================

                    Similarity Measures for word_analogy

Multiple similarity measures were explored
Examples:
->1.0/dist_diff
-> 1.0/ absolute_euclid_dist_diff
-> pairwise_cossim
-> diff_cossim
-> 1.0/abs(avg_cossim - pairwise_cossim)
-> 1.0/(absolute_euclid_dist_diff * abs(avg_cossim - pairwise_cossim) )
-> pairwise_cossim/(absolute_euclid_dist_diff * abs(avg_cossim - pairwise_cossim) )
-> pairwise_cossim / (absolute_euclid_dist_diff)

Meaning of terms in different measures:
1.  pairwise_cossim -> 
  a.  cosine similarity in a given pair, (student, essay) -> cosine(student, essay)
  b.  A naÃ¯ve estimate of by how much quantity a pair is similar to each other
  c.  The more it is, higher the probability of a given pair to be analogous to each other (directly proportional)
2.  absolute_length_diff ->  
  a.  For a given average of difference vectors and a particular vector, calculates their absolute length difference
  b.  Estimates how close our the lengths of two related pairs
  c.  The less it is, more analogous are the pair to each other (inversely proportional)
3.  diff_length_difference ->
  a.  For a given average length for a set of difference vectors, calculate their difference with a length of query difference vector
  b.  The less it is, more analogous are the pair to each other (inversely proportional)
4.  avg_cossim
  a.  average of cosine similarity on a list of true related pairs
5.  diff_cossim
  a.  cosine similarity between average difference vector and a particular difference vector
  b.  The more it is, higher the probability of a given pair to be analogous ot each other (directly proportional)
Note: 2 and 3 may seem similar, but are different.
 (2) tries to match the magnitude of the average of true difference vectors to the magnitude of query difference vector,
(3) tries to match the average of magnitudes of true difference vectors to the magnitude of query difference vector

The best similarity measures were evaluated by training cross-entropy and nce loss based models on default parameters and evaluating their accuracy against given word_analogy_mturk queries

Best similarity measure for cross-entropy: 
    pairwise_cossim/(absolute_length_diff * abs(avg_cossim - pairwise_cossim))

    Possible reason: 
    Pair wise cosine similarity ensures that the given pair belong to same word space
    E.g (student:essay) , 'student' and 'essay' belong to same word-space of education related words
    Absolute length difference ensures that the magnitude of average difference vector should be as close 
    to magnitude of difference vector of a particular pair, thus satisfying our word analogy goal
    Absolute difference of average cosine similarity and pair-wise cosine similarity ensures that
    the amount of similarity in a given difference vectors matches the amount of similarity of the pair to be evaluated

Best similarity measure for noise-contrastive-estimation: 
    1.0/(abs(avg_cossim - pairwise_cossim) * diff_length_difference)

    Possible reason: 
    Nature of the embeddings made from nce-loss, which are trained on the basis of binary logistic regression
    may detect that absolute difference of average cosine similarity and pair-wise cosine similarity
    are more valuable than plain magnitude difference.


==============================================================================

                    Experiment Configuration and Training Steps

Loss cross entropy:

batch_size = 64, 256
skip_window = 2, 8
learning_rate = 2.0
embedding_size = 256
num_steps = 900001

Best Model: 
batch_size=128, skip_window=4, num_skips=8, learning_rate=1.0, embedding_size = 256, num_steps = 900001


Loss NCE:
batch_size = 32
skip_window = 2, 8
num_sampled = 32, 8
num_steps = 400001

Best Model: 
batch_size = 128 skip_window = 8
num_skips = 16 num_sampled = 8
max_num_steps = 200001 learning_rate = 1.0


